# -*- coding: utf-8 -*-
"""simulated-annealing-alb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ao3_UV4gGZ3Rq9uhR8KGlQHeS3v4bkKg
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import os
# %matplotlib inline
input_dir = "./input"
file_names = os.listdir(input_dir)
print('runing files :')
for f in range(len(file_names)):
  print(input_dir+'/'+file_names[f])

import sys
#import_lib = './simulated-annealing-para-alb'
#sys.path.append(import_lib)
from assembly_line import AssemblyLine
from simulated_annealing_for_alb import SimulatedAnnealingForALB
import time

number_of_workstations={}
parameters = {}
default_cooling_rate = 5
#SCHOLL
parameters[0] = [1000, default_cooling_rate]
number_of_workstations[0] = [25,35]
#ARC83
parameters[1] = [1000, default_cooling_rate]
number_of_workstations[1] = [6]
#TONGE70
parameters[2] = [1000, default_cooling_rate]
number_of_workstations[2] = [3, 4, 5, 6, 7, 8, 9, 10, 20]
#WEE-MAG
parameters[3] = [1000, default_cooling_rate]
number_of_workstations[3] = [3, 4, 5, 6, 7, 12, 13, 14, 17]

training_times = 5

hhistory={}
for t in range(training_times):
  history[t]={}
  for f in range(len(file_names)):
    history[t][f]= {}
    print(input_dir+'/'+file_names[f])
    w=0
    for i in number_of_workstations[f]:
        history[t][f][w] = {}
        time_start = time.time()
        file = open(input_dir+'/'+file_names[f])
        assembly_line = AssemblyLine(file, i)
        file.close()
        print(assembly_line.get_dependency_graph())
        simulated_annealing_for_alb = SimulatedAnnealingForALB(assembly_line)

        initial_temperature = simulated_annealing_for_alb.get_cycle_time_current_solution()
        maximum_number_of_disturbances = assembly_line.get_number_of_workstations() * assembly_line.get_number_of_tasks()
        cooling_rate = 0.95
        print("Number of workstations: " + str(i))
        print("Solução Inicial: " + str(simulated_annealing_for_alb.get_cycle_time_current_solution()))

        simulated_annealing_for_alb.run(initial_temperature, maximum_number_of_disturbances, cooling_rate)

        time_end = time.time()
        optimal_sol = simulated_annealing_for_alb.get_cycle_time_optimal_solution()
        print("Solução Final: " + str(optimal_sol))
        time = time_end - time_start
        print("Tempo de execução: " + str(time))
        history[t][f][w] = [str(i),str(initial_temperature),str(optimal_sol),str(time_start),str(time_end),str(time)]
        w=w+1